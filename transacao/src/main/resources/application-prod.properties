spring.datasource.url=jdbc:mysql://transacao-mysql:3306/transacao?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImproveNamingStrategy
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect

spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://keycloak:8080/auth/realms/transacao/protocol/openid-connect/certs}


server.port = 8080

spring.kafka.bootstrap-servers=${KAFKA_HOST:kafka:29092}
# Formato da chave (String) recebida!
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# Formato da mensagem \ evento (JSON) recebida(o)!
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# Identificador do grupo de consumo
spring.kafka.consumer.group-id=${KAFKA_CONSUMER_GROUP_ID:transacoes}
# Modelo de coleta do consumidor (latest, earliest, none)
spring.kafka.consumer.auto-offset-reset=${KAFKA_AUTO-OFFSET-RESET:latest}
spring.kafka.topic.transactions=${TOPIC:transacoes}